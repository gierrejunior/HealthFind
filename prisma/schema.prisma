// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  STAFF
  ADMIN
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

// Enum para status da assinatura
enum SubscriptionStatus {
  ACTIVE // Assinatura ativa
  SUSPENDED // Assinatura suspensa por falta de pagamento
  CANCELLED // Assinatura cancelada
  EXPIRED // Assinatura expirou e não foi renovada
}

// Enum para status do pagamento
enum PaymentStatus {
  PENDING // Pagamento pendente
  SUCCESS // Pagamento concluído com sucesso
  FAILED // Pagamento falhou
  REFUNDED // Pagamento reembolsado
  CANCELLED // Pagamento cancelado
}

// Enum para status da fatura
enum InvoiceStatus {
  GENERATED // Fatura gerada
  PAID // Fatura paga
  OVERDUE // Fatura vencida
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  username  String    @unique
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  password  String
  lastLogin DateTime? @default(now()) @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  role      Role      @default(USER)
  isActive  Boolean   @default(true) @map("is_active")
  cityId    String?

  city                       City?               @relation(fields: [cityId], references: [id])
  createdByHealthUnits       HealthUnit[]        @relation("CreatedBy")
  updatedByHealthUnits       HealthUnit[]        @relation("UpdatedBy")
  createdByHealthUnitArea    HealthUnitArea[]    @relation("CreatedBy")
  updatedByHealthUnitArea    HealthUnitArea[]    @relation("UpdatedBy")
  createdByHealthTeam        HealthTeam[]        @relation("CreatedBy")
  updatedByHealthTeam        HealthTeam[]        @relation("UpdatedBy")
  createdByHealthTeamArea    HealthTeamArea[]    @relation("CreatedBy")
  updatedByHealthTeamArea    HealthTeamArea[]    @relation("UpdatedBy")
  createdByNurse             Nurse[]             @relation("CreatedBy")
  updatedByNurse             Nurse[]             @relation("UpdatedBy")
  createdByDoctor            Doctor[]            @relation("CreatedBy")
  updatedByDoctor            Doctor[]            @relation("UpdatedBy")
  createdByNursingTechnician NursingTechnician[] @relation("CreatedBy")
  updatedByNursingTechnician NursingTechnician[] @relation("UpdatedBy")
  createdByDentist           Dentist[]           @relation("CreatedBy")
  updatedByDentist           Dentist[]           @relation("UpdatedBy")
  createdByHealthAgent       HealthAgent[]       @relation("CreatedBy")
  updatedByHealthAgent       HealthAgent[]       @relation("UpdatedBy")
  createdByMicroArea         MicroArea[]         @relation("CreatedBy")
  updatedByMicroArea         MicroArea[]         @relation("UpdatedBy")
  AuditLog                   AuditLog[]

  @@map("users")
}

model HealthUnit {
  id          String    @id @default(uuid())
  unitType    String
  title       String
  description String?
  cnes        String?   @unique
  cityId      String
  address     String?
  cep         String?
  phone       String?
  manager     String?
  email       String?
  latitude    Decimal
  longitude   Decimal
  imgPath     String?   @map("img_path")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  City           City            @relation(fields: [cityId], references: [id])
  healthUnitArea HealthUnitArea?
  healthTeams    HealthTeam[]

  createdById String? @map("created_by_id")
  updatedById String? @map("updated_by_id")

  CreatedBy User? @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy User? @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  @@map("health_units")
}

model HealthUnitArea {
  id        String    @id @default(uuid())
  title     String?
  geojson   Json
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthUnitId String  @unique @map("health_unit_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthUnit HealthUnit @relation(fields: [healthUnitId], references: [id])

  @@map("health_unit_areas")
}

model HealthTeam {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  healthTeamArea     HealthTeamArea?
  nurses             Nurse[]
  doctors            Doctor[]
  nursingTechnicians NursingTechnician[]
  Dentist            Dentist[]
  healthAgents       HealthAgent[]

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthUnitId String  @map("health_unit_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthUnit HealthUnit @relation(fields: [healthUnitId], references: [id])

  @@map("health_teams")
}

model HealthTeamArea {
  id        String    @id @default(uuid())
  title     String?
  geojson   Json
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String  @unique @map("health_team_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam @relation(fields: [healthTeamId], references: [id])

  @@map("health_team_areas")
}

model Nurse {
  id        String    @id @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  coren     String?
  imgPath   String?   @map("img_path")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String  @map("health_team_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam @relation(fields: [healthTeamId], references: [id])

  @@map("nurses")
}

model Doctor {
  id        String    @id @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  crm       String?
  specialty String?
  imgPath   String?   @map("img_path")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String  @map("health_team_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam @relation(fields: [healthTeamId], references: [id])

  @@map("doctors")
}

model NursingTechnician {
  id        String   @id @default(uuid())
  name      String
  coren     String?
  imgPath   String?  @map("img_path")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String  @map("health_team_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam @relation(fields: [healthTeamId], references: [id])

  @@map("nursing_technicians")
}

model Dentist {
  id        String    @id @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  cro       String?
  imgPath   String?   @map("img_path")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String  @map("health_team_id")

  CreatedBy  User?      @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?      @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam @relation(fields: [healthTeamId], references: [id])

  @@map("dentists")
}

model HealthAgent {
  id        String    @id @default(uuid())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  imgPath   String?   @map("img_path")
  phone     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  MicroAreas MicroArea[] // Permite várias `MicroAreas` para um `HealthAgent`

  createdById  String? @map("created_by_id")
  updatedById  String? @map("updated_by_id")
  healthTeamId String? @map("health_team_id")

  CreatedBy  User?       @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy  User?       @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthTeam HealthTeam? @relation(fields: [healthTeamId], references: [id])

  @@map("health_agents")
}

model MicroArea {
  id                String    @id @default(uuid())
  title             String?
  number_micro_area Int
  geojson           Json
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  createdById   String? @map("created_by_id")
  updatedById   String? @map("updated_by_id")
  healthAgentId String  @map("health_agent_id") // Remova @unique aqui

  CreatedBy   User?       @relation("CreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  UpdatedBy   User?       @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  healthAgent HealthAgent @relation(fields: [healthAgentId], references: [id])

  @@map("micro_areas")
}

// Tabela de cidades
model City {
  id           String        @id @default(uuid())
  cnpj         String        @unique
  name         String
  state        String // Unidade federativa (UF)
  geojson      Json
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Subscription Subscription?
  User         User[]
  HealthUnit   HealthUnit[]
}

// Tabela de assinaturas para cidades
model Subscription {
  id               String             @id @default(uuid())
  cityId           String             @unique
  city             City               @relation(fields: [cityId], references: [id])
  status           SubscriptionStatus // Status da assinatura
  startDate        DateTime // Data de início da assinatura
  endDate          DateTime? // Data de término
  cancellationDate DateTime? // Data de cancelamento, se aplicável
  nextBillingDate  DateTime // Próxima data de cobrança
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Payments         Payment[]
  Invoices         Invoice[]
}

// Tabela de pagamentos para cidades
model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  amount         Float // Valor do pagamento
  status         PaymentStatus // Status do pagamento
  paymentDate    DateTime? // Data de processamento
  dueDate        DateTime // Data de vencimento
  retryCount     Int           @default(0) // Contador de tentativas
  failureReason  String? // Motivo da falha
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Invoice        Invoice[]
}

// Tabela de faturas para cidades
model Invoice {
  id             String        @id @default(uuid())
  subscriptionId String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  paymentId      String? // Relaciona a um pagamento
  payment        Payment?      @relation(fields: [paymentId], references: [id])
  amount         Float // Valor total
  dueDate        DateTime // Data de vencimento
  status         InvoiceStatus // Status da fatura
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

// Modelo de Auditoria
model AuditLog {
  id         String   @id @default(uuid())
  entityId   String // ID da entidade afetada
  entityType String // Tipo da entidade, como "User", "HealthUnit", etc.
  action     Action // Tipo de ação: "CREATE", "UPDATE", ou "DELETE"
  userId     String? // ID do usuário que realizou a ação (opcional)
  oldData    Json? // Dados antigos (opcional para "CREATE")
  newData    Json? // Dados novos (opcional para "DELETE")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relacionamento opcional com o modelo User para referenciar o usuário que fez a ação
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
